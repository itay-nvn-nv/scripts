apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: network-test
  namespace: default
spec:
  selector:
    matchLabels:
      app: network-test
  template:
    metadata:
      labels:
        app: network-test
    spec:
      containers:
      - name: network-test
        image: wbitt/network-multitool
        command: [ "/bin/bash", "-c" ]
        args:
        - |
          #!/bin/sh
          set -e

          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          kubectl cluster-info

          SERVICE_FQDN="network-test-svc.default.svc.cluster.local"
          ATTEMPTS=3
          SLEEP_INTERVAL=2

          # Get the node names from Kubernetes API and resolve each node's pod FQDN
          NODES=$(kubectl get nodes -o jsonpath='{.items[*].metadata.name}')

          echo "Testing connectivity to service FQDN: $SERVICE_FQDN"
          if nslookup "$SERVICE_FQDN" > /dev/null 2>&1; then
              echo "DNS resolution successful for $SERVICE_FQDN"
          else
              echo "DNS resolution failed for $SERVICE_FQDN"
              exit 1
          fi

          for NODE in $NODES; do
              POD_FQDN="network-test-$NODE.default.svc.cluster.local"
              echo "Node: $NODE, Pod FQDN: $POD_FQDN"

              # DNS resolution phase
              echo "Performing nslookup for $POD_FQDN"
              if nslookup "$POD_FQDN" > /dev/null 2>&1; then
                  echo "DNS resolution for $POD_FQDN successful"
              else
                  echo "DNS resolution for $POD_FQDN failed"
                  continue
              fi

              # Connectivity check phase
              for i in $(seq 1 $ATTEMPTS); do
                  echo "Attempt $i: Connecting to $POD_FQDN"
                  if curl -s --connect-timeout 5 "http://$POD_FQDN:8080" > /dev/null 2>&1; then
                      echo "Connection to $POD_FQDN successful"
                  else
                      echo "Connection to $POD_FQDN failed"
                  fi
                  sleep $SLEEP_INTERVAL
              done
          done
          sleep infinity
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
          seccompProfile:
            type: RuntimeDefault
      tolerations:
      - operator: Exists
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
---
apiVersion: v1
kind: Service
metadata:
  name: network-test-svc
  namespace: default
spec:
  clusterIP: None # Headless service
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: network-test
